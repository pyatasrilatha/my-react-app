{"version":3,"sources":["components/Header/Header.js","components/LoginForm/LoginForm.js","components/RegistrationForm/RegistrationForm.js","components/Home/Home.js","components/AlertComponent/AlertComponent.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","withRouter","props","useState","email","password","successMessage","state","setState","handleChange","e","target","id","value","prevState","redirectToHome","updateTitle","history","push","htmlFor","type","aria-describedby","placeholder","onChange","onClick","preventDefault","payload","axios","post","API_BASE_URL","then","response","data","code","showError","catch","error","console","log","style","display","role","confirmPassword","length","sendDetailsToServer","Home","AlertComponent","modalDisplay","toggleDisplay","closeModal","hideError","useEffect","errorMessage","aria-label","aria-hidden","App","title","updateErrorMessage","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iUAWeA,MAVf,WACI,OAEI,6BACI,yBAAKC,UAAU,uDACf,0BAAMA,UAAU,MAAhB,e,+CC6FGC,mBA7Ff,SAAmBC,GAAQ,IAAD,EACKC,mBAAS,CAChCC,MAAQ,GACRC,SAAW,GACXC,eAAgB,OAJE,mBACfC,EADe,KACPC,EADO,KAMhBC,EAAe,SAACC,GAAO,IAAD,EACHA,EAAEC,OAAhBC,EADiB,EACjBA,GAAKC,EADY,EACZA,MACZL,GAAS,SAAAM,GAAS,kCACXA,GADW,kBAEbF,EAAMC,QA+BTE,EAAiB,WACnBb,EAAMc,YAAY,QAClBd,EAAMe,QAAQC,KAAK,UAMvB,OACI,yBAAKlB,UAAU,kDACX,8BACI,yBAAKA,UAAU,wBACf,2BAAOmB,QAAQ,sBAAf,iBACA,2BAAOC,KAAK,QACLpB,UAAU,eACVY,GAAG,QACHS,mBAAiB,YACjBC,YAAY,cACZT,MAAON,EAAMH,MACbmB,SAAUd,IAEjB,2BAAOG,GAAG,YAAYZ,UAAU,wBAAhC,mDAEA,yBAAKA,UAAU,wBACf,2BAAOmB,QAAQ,yBAAf,YACA,2BAAOC,KAAK,WACLpB,UAAU,eACVY,GAAG,WACHU,YAAY,WACZT,MAAON,EAAMF,SACbkB,SAAUd,KAGjB,yBAAKT,UAAU,eAEf,4BACIoB,KAAK,SACLpB,UAAU,kBACVwB,QAjEU,SAACd,GACvBA,EAAEe,iBACF,IAAMC,EAAQ,CACV,MAAQnB,EAAMH,MACd,SAAWG,EAAMF,UAErBsB,IAAMC,KAAKC,kCAAsBH,GAC5BI,MAAK,SAAUC,GACc,MAAvBA,EAASC,KAAKC,MACbzB,GAAS,SAAAM,GAAS,kCACXA,GADW,IAEd,eAAmB,oDAEvBC,IACAb,EAAMgC,UAAU,OAEW,MAAvBH,EAASC,KAAKC,KAClB/B,EAAMgC,UAAU,sCAGhBhC,EAAMgC,UAAU,+BAGvBC,OAAM,SAAUC,GACbC,QAAQC,IAAIF,QAsCZ,WAMJ,yBAAKpC,UAAU,2BAA2BuC,MAAO,CAACC,QAASjC,EAAMD,eAAiB,QAAU,QAAUmC,KAAK,SACtGlC,EAAMD,gBAEX,yBAAKN,UAAU,mBACX,wDACA,0BAAMA,UAAU,YAAYwB,QAAS,kBAzC7CtB,EAAMe,QAAQC,KAAK,kBACnBhB,EAAMc,YAAY,cAwCV,iB,MC0BDf,mBAjHf,SAA0BC,GAAQ,IAAD,EACFC,mBAAS,CAChCC,MAAQ,GACRC,SAAW,GACXqC,gBAAiB,GACjBpC,eAAgB,OALS,mBACtBC,EADsB,KACdC,EADc,KAOvBC,EAAe,SAACC,GAAO,IAAD,EACHA,EAAEC,OAAhBC,EADiB,EACjBA,GAAKC,EADY,EACZA,MACZL,GAAS,SAAAM,GAAS,kCACXA,GADW,kBAEbF,EAAMC,QA+BTE,EAAiB,WACnBb,EAAMc,YAAY,QAClBd,EAAMe,QAAQC,KAAK,UAcvB,OACI,yBAAKlB,UAAU,kDACX,8BACI,yBAAKA,UAAU,wBACf,2BAAOmB,QAAQ,sBAAf,iBACA,2BAAOC,KAAK,QACLpB,UAAU,eACVY,GAAG,QACHS,mBAAiB,YACjBC,YAAY,cACZT,MAAON,EAAMH,MACbmB,SAAUd,IAEjB,2BAAOG,GAAG,YAAYZ,UAAU,wBAAhC,mDAEA,yBAAKA,UAAU,wBACX,2BAAOmB,QAAQ,yBAAf,YACA,2BAAOC,KAAK,WACRpB,UAAU,eACVY,GAAG,WACHU,YAAY,WACZT,MAAON,EAAMF,SACbkB,SAAUd,KAGlB,yBAAKT,UAAU,wBACX,2BAAOmB,QAAQ,yBAAf,oBACA,2BAAOC,KAAK,WACRpB,UAAU,eACVY,GAAG,kBACHU,YAAY,mBACZT,MAAON,EAAMmC,gBACbnB,SAAUd,KAGlB,4BACIW,KAAK,SACLpB,UAAU,kBACVwB,QA9CU,SAACd,GACvBA,EAAEe,iBACClB,EAAMF,WAAaE,EAAMmC,gBAtCJ,WACxB,GAAGnC,EAAMH,MAAMuC,QAAUpC,EAAMF,SAASsC,OAAQ,CAC5CzC,EAAMgC,UAAU,MAChB,IAAMR,EAAQ,CACV,MAAQnB,EAAMH,MACd,SAAWG,EAAMF,UAErBsB,IAAMC,KAAKC,qCAAyBH,GAC/BI,MAAK,SAAUC,GACc,MAAvBA,EAASC,KAAKC,MACbzB,GAAS,SAAAM,GAAS,kCACXA,GADW,IAEd,eAAmB,2DAEvBC,IACAb,EAAMgC,UAAU,OAEhBhC,EAAMgC,UAAU,yBAGvBC,OAAM,SAAUC,GACbC,QAAQC,IAAIF,WAGpBlC,EAAMgC,UAAU,4CAehBU,GAEA1C,EAAMgC,UAAU,4BAsCZ,aAQJ,yBAAKlC,UAAU,2BAA2BuC,MAAO,CAACC,QAASjC,EAAMD,eAAiB,QAAU,QAAUmC,KAAK,SACtGlC,EAAMD,gBAEX,yBAAKN,UAAU,QACX,2DACA,0BAAMA,UAAU,YAAYwB,QAAS,kBA3D7CtB,EAAMc,YAAY,cAClBd,EAAMe,QAAQC,KAAK,YA0DX,mBCvGD2B,MARf,SAAc3C,GACV,OACI,yBAAKF,UAAU,QAAf,sB,cCkCO8C,MAnCf,SAAwB5C,GAAQ,IAAD,EACWC,mBAAS,QADpB,mBACpB4C,EADoB,KACNC,EADM,KAKrBC,EAAa,WACfD,EAAc,QACd9C,EAAMgD,UAAU,OAUpB,OARAC,qBAAU,WACoB,OAAvBjD,EAAMkD,aAPTJ,EAAc,SAUVC,OAKJ,yBACIjD,UAAW,4CACXyC,KAAK,QACL7B,GAAG,aACH2B,MAAO,CAAEC,QAASO,IAElB,yBAAK/C,UAAU,uBACX,8BAAOE,EAAMkD,cACb,4BAAQhC,KAAK,SAASpB,UAAU,QAAQqD,aAAW,QAAQ7B,QAAS,kBAAMyB,MACtE,0BAAMK,cAAY,QAAlB,YCcLC,MA/Bf,WAAgB,IAAD,EACgBpD,mBAAS,MADzB,mBACNqD,EADM,KACCxC,EADD,OAE8Bb,mBAAS,MAFvC,mBAENiD,EAFM,KAEQK,EAFR,KAGb,OACE,kBAAC,IAAD,KACA,yBAAKzD,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAQwD,MAAOA,IACf,yBAAKxD,UAAU,mDACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0D,KAAK,IAAIC,OAAO,GACrB,kBAAC,EAAD,CAAkBzB,UAAWuB,EAAoBzC,YAAaA,KAEhE,kBAAC,IAAD,CAAO0C,KAAK,aACV,kBAAC,EAAD,CAAkBxB,UAAWuB,EAAoBzC,YAAaA,KAEhE,kBAAC,IAAD,CAAO0C,KAAK,UACV,kBAAC,EAAD,CAAWxB,UAAWuB,EAAoBzC,YAAaA,KAEzD,kBAAC,IAAD,CAAO0C,KAAK,SACV,kBAAC,EAAD,QAGJ,kBAAC,EAAD,CAAgBN,aAAcA,EAAcF,UAAWO,SCvB7CG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdvC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMuC,c","file":"static/js/main.cd401614.chunk.js","sourcesContent":["import React from 'react';\nfunction Header() {\n    return(\n        // <nav class=\"navbar navbar-dark bg-primary\">\n        <nav>\n            <div className=\"row col-12 d-flex justify-content-center text-white\">\n            <span className=\"h3\">Register</span>\n            </div>\n        </nav>\n    )\n}\nexport default Header;","import React, {useState} from 'react';\nimport axios from 'axios';\nimport './LoginForm.css';\nimport {API_BASE_URL} from '../../constants/apiContants';\nimport { withRouter } from \"react-router-dom\";\n\nfunction LoginForm(props) {\n    const [state , setState] = useState({\n        email : \"\",\n        password : \"\",\n        successMessage: null\n    })\n    const handleChange = (e) => {\n        const {id , value} = e.target   \n        setState(prevState => ({\n            ...prevState,\n            [id] : value\n        }))\n    }\n\n    const handleSubmitClick = (e) => {\n        e.preventDefault();\n        const payload={\n            \"email\":state.email,\n            \"password\":state.password,\n        }\n        axios.post(API_BASE_URL+'login', payload)\n            .then(function (response) {\n                if(response.data.code === 200){\n                    setState(prevState => ({\n                        ...prevState,\n                        'successMessage' : 'Login successful. Redirecting to home page..'\n                    }))\n                    redirectToHome();\n                    props.showError(null)\n                }\n                else if(response.data.code === 204){\n                    props.showError(\"Username and password do not match\");\n                }\n                else{\n                    props.showError(\"Username does not exists\");\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    const redirectToHome = () => {\n        props.updateTitle('Home')\n        props.history.push('/home');\n    }\n    const redirectToRegister = () => {\n        props.history.push('/register'); \n        props.updateTitle('Register');\n    }\n    return(\n        <div className=\"card col-12 col-lg-4 login-card mt-2 hv-center\">\n            <form>\n                <div className=\"form-group text-left\">\n                <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                <input type=\"email\" \n                       className=\"form-control\" \n                       id=\"email\" \n                       aria-describedby=\"emailHelp\" \n                       placeholder=\"Enter email\" \n                       value={state.email}\n                       onChange={handleChange}\n                />\n                <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                </div>\n                <div className=\"form-group text-left\">\n                <label htmlFor=\"exampleInputPassword1\">Password</label>\n                <input type=\"password\" \n                       className=\"form-control\" \n                       id=\"password\" \n                       placeholder=\"Password\"\n                       value={state.password}\n                       onChange={handleChange} \n                />\n                </div>\n                <div className=\"form-check\">\n                </div>\n                <button \n                    type=\"submit\" \n                    className=\"btn btn-primary\"\n                    onClick={handleSubmitClick}\n                >Submit</button>\n            </form>\n            <div className=\"alert alert-success mt-2\" style={{display: state.successMessage ? 'block' : 'none' }} role=\"alert\">\n                {state.successMessage}\n            </div>\n            <div className=\"registerMessage\">\n                <span>Dont have an account? </span>\n                <span className=\"loginText\" onClick={() => redirectToRegister()}>Register</span> \n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(LoginForm);","import React, {useState} from 'react';\nimport axios from 'axios';\nimport './RegistrationForm.css';\nimport {API_BASE_URL} from '../../constants/apiContants';\nimport { withRouter } from \"react-router-dom\";\n\nfunction RegistrationForm(props) {\n    const [state , setState] = useState({\n        email : \"\",\n        password : \"\",\n        confirmPassword: \"\",\n        successMessage: null\n    })\n    const handleChange = (e) => {\n        const {id , value} = e.target   \n        setState(prevState => ({\n            ...prevState,\n            [id] : value\n        }))\n    }\n    const sendDetailsToServer = () => {\n        if(state.email.length && state.password.length) {\n            props.showError(null);\n            const payload={\n                \"email\":state.email,\n                \"password\":state.password,\n            }\n            axios.post(API_BASE_URL+'register', payload)\n                .then(function (response) {\n                    if(response.data.code === 200){\n                        setState(prevState => ({\n                            ...prevState,\n                            'successMessage' : 'Registration successful. Redirecting to home page..'\n                        }))\n                        redirectToHome();\n                        props.showError(null)\n                    } else{\n                        props.showError(\"Some error ocurred\");\n                    }\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });    \n        } else {\n            props.showError('Please enter valid username and password')    \n        }\n        \n    }\n    const redirectToHome = () => {\n        props.updateTitle('Home')\n        props.history.push('/home');\n    }\n    const redirectToLogin = () => {\n        props.updateTitle('Login')\n        props.history.push('/login'); \n    }\n    const handleSubmitClick = (e) => {\n        e.preventDefault();\n        if(state.password === state.confirmPassword) {\n            sendDetailsToServer()    \n        } else {\n            props.showError('Passwords do not match');\n        }\n    }\n    return(\n        <div className=\"card col-12 col-lg-4 login-card mt-2 hv-center\">\n            <form>\n                <div className=\"form-group text-left\">\n                <label htmlFor=\"exampleInputEmail1\">Email address</label>\n                <input type=\"email\" \n                       className=\"form-control\" \n                       id=\"email\" \n                       aria-describedby=\"emailHelp\" \n                       placeholder=\"Enter email\" \n                       value={state.email}\n                       onChange={handleChange}\n                />\n                <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n                </div>\n                <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputPassword1\">Password</label>\n                    <input type=\"password\" \n                        className=\"form-control\" \n                        id=\"password\" \n                        placeholder=\"Password\"\n                        value={state.password}\n                        onChange={handleChange} \n                    />\n                </div>\n                <div className=\"form-group text-left\">\n                    <label htmlFor=\"exampleInputPassword1\">Confirm Password</label>\n                    <input type=\"password\" \n                        className=\"form-control\" \n                        id=\"confirmPassword\" \n                        placeholder=\"Confirm Password\"\n                        value={state.confirmPassword}\n                        onChange={handleChange} \n                    />\n                </div>\n                <button \n                    type=\"submit\" \n                    className=\"btn btn-primary\"\n                    onClick={handleSubmitClick}\n                >\n                    Register\n                </button>\n            </form>\n            <div className=\"alert alert-success mt-2\" style={{display: state.successMessage ? 'block' : 'none' }} role=\"alert\">\n                {state.successMessage}\n            </div>\n            <div className=\"mt-2\">\n                <span>Already have an account? </span>\n                <span className=\"loginText\" onClick={() => redirectToLogin()}>Login here</span> \n            </div>\n            \n        </div>\n    )\n}\n\nexport default withRouter(RegistrationForm);","import React from 'react';\nfunction Home(props) {\n    return(\n        <div className=\"mt-2\">\n            Home page content\n        </div>\n    )\n}\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport './AlertComponent.css';\nfunction AlertComponent(props) {\n    const [modalDisplay, toggleDisplay] = useState('none');\n    const openModal = () => {\n        toggleDisplay('block');     \n    }\n    const closeModal = () => {\n        toggleDisplay('none'); \n        props.hideError(null);\n    }\n    useEffect(() => {\n        if(props.errorMessage !== null) {\n            openModal()\n        } else {\n            closeModal()\n        }\n    });\n    \n    return(\n        <div \n            className={\"alert alert-danger alert-dismissable mt-4\"} \n            role=\"alert\" \n            id=\"alertPopUp\"\n            style={{ display: modalDisplay }}\n        >\n            <div className=\"d-flex alertMessage\">\n                <span>{props.errorMessage}</span>\n                <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={() => closeModal()}>\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            \n        </div>\n    )\n} \n\nexport default AlertComponent","import React, {useState} from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport LoginForm from './components/LoginForm/LoginForm';\nimport RegistrationForm from './components/RegistrationForm/RegistrationForm';\nimport Home from './components/Home/Home';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport AlertComponent from './components/AlertComponent/AlertComponent';  \nfunction App() {\n  const [title, updateTitle] = useState(null);\n  const [errorMessage, updateErrorMessage] = useState(null);\n  return (\n    <Router> \n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Header title={title}/>\n        <div className=\"container d-flex align-items-center flex-column\">\n          <Switch>\n            <Route path=\"/\" exact={true}>\n              <RegistrationForm showError={updateErrorMessage} updateTitle={updateTitle}/>\n            </Route>\n            <Route path=\"/register\">\n              <RegistrationForm showError={updateErrorMessage} updateTitle={updateTitle}/>\n            </Route>\n            <Route path=\"/login\">\n              <LoginForm showError={updateErrorMessage} updateTitle={updateTitle}/>\n            </Route>\n            <Route path=\"/home\">\n              <Home/>\n            </Route>\n          </Switch>\n          <AlertComponent errorMessage={errorMessage} hideError={updateErrorMessage}/>\n        </div>\n      </div>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}